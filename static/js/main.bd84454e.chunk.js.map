{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ioClient","io","on","console","log","id","App","useState","individualLocation","setIndividualLocation","usersLocations","setUsersLocations","isLoading","setLoading","showLocations","setShowLocations","useEffect","axios","method","baseURL","url","headers","then","response","data","locations","catch","error","navigator","geolocation","getCurrentPosition","position","coords","coordinates","latitude","longitude","postToMongoDBAtlas","className","Container","role","Button","variant","disabled","onClick","length","map","loc","_id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAQMA,EAAWC,IAAG,8CACpBD,EAASE,GAAG,WAAW,WACjBC,QAAQC,IAAIJ,EAASK,OA2GZC,MAxGf,WAsCE,MAAoDC,mBAAS,MAA7D,mBAAOC,EAAP,KAA2BC,EAA3B,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAmBA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA0CN,oBAAS,GAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KAeA,OAdAC,qBAAU,WACJJ,GAnBGK,IAAM,CACXC,OAAQ,MACRC,QAAS,6CACTC,IAAK,YACLC,QAAS,CACP,eAAgB,sBAGnBC,MAAK,SAACC,GACLpB,QAAQC,IAAImB,GACZZ,EAAkBY,EAASC,KAAKC,cAEjCC,OAAM,SAACC,GACNxB,QAAQwB,MAAMA,MAQbL,MAAK,WACJT,GAAW,GACXE,GAAiB,QAGpB,CAACH,IAlEEgB,UAAUC,cAAgBrB,GAC5BoB,UAAUC,YAAYC,oBAAmB,SAASC,GAChDtB,EAAsBsB,EAASC,QAMrC,SAA4BC,GAC1B,IAAQC,EAAuBD,EAAvBC,SAAUC,EAAaF,EAAbE,UACZX,EAAO,CACX,SAAW,GAAX,OAAeU,GACf,UAAY,GAAZ,OAAgBC,IAIlBlB,IAAM,CACJC,OAAQ,OACRC,QAAS,6CACTC,IAAK,YACLI,OACAH,QAAS,CACP,eAAgB,sBAGnBC,MAAK,SAACC,GAGL,OADApB,QAAQC,IAAImB,GACLA,KAERG,OAAM,SAACC,GAENxB,QAAQC,IAAIuB,MA7BVS,CAAmBL,EAASC,WAsEhC,qBAAKK,UAAU,UAAf,SACE,eAACC,EAAA,EAAD,CAAWD,UAAU,uCAArB,UACA,wBAAQA,UAAU,mBAAlB,SACE,qBAAKA,UAAU,QAAf,SACE,oBAAIA,UAAU,4BAAd,iCAGJ,uBAAME,KAAK,OAAOF,UAAU,cAA5B,UACE,oBAAIA,UAAU,gBAAd,gCACA,mBAAGA,UAAU,OAAb,gIAEA,cAACG,EAAA,EAAD,CACEC,QAAQ,QACRC,SAAU9B,EACV+B,QAAU/B,EAA8B,KAnBxB,kBAAMC,GAAW,IAgBnC,SAKDD,EAAY,gBAAa,mBAE1B,cAAC4B,EAAA,EAAD,CAAQC,QAAQ,QAAQE,QAtBH,kBAAM5B,GAAiB,IAsB5C,6BACA,6BACCL,EAAekC,OAAS,GAAK9B,GAClCJ,EAAemC,KAAI,SAAAC,GAAG,OAAI,4CAA6BA,EAAIZ,SAAjC,gBAAwDY,EAAIX,YAAnDW,EAAIC,mBCjG1BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.bd84454e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport  io  from \"socket.io-client\";\n\nimport './App.css';\nimport axios from 'axios'\n\nconst ioClient = io(\"https://quiet-plateau-57365.herokuapp.com/\");\nioClient.on(\"connect\", () => {\n      console.log(ioClient.id); // x8WIv7-mJelg7on_ALbx\n    });\n\nfunction App() {\n  function getLocation() {\n    if (navigator.geolocation && !individualLocation){\n      navigator.geolocation.getCurrentPosition(function(position) {\n        setIndividualLocation(position.coords)\n        postToMongoDBAtlas(position.coords)\n      });\n    }\n  }\n  \n  function postToMongoDBAtlas(coordinates) {\n    const { latitude, longitude} = coordinates\n    const data = {\n      \"latitude\": `${latitude}`,\n      \"longitude\": `${longitude}`,\n    }\n    // GeolocationCoordinates { latitude: 33.7227231111664, longitude: -111.9814122972247, altitude: 536.8526000976562, accuracy: 65, altitudeAccuracy: 10, heading: null, speed: null \n    // };\n    axios({\n      method: 'post',\n      baseURL: 'https://quiet-plateau-57365.herokuapp.com/',\n      url: 'locations',\n      data,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n    .then((response) => {\n      // The response comes here\n      console.log(response);\n      return response\n    })\n    .catch((error) => {\n      // Errors are reported there\n      console.log(error);\n    });\n  }\n\n  const [individualLocation, setIndividualLocation] = useState(null)\n  const [usersLocations, setUsersLocations] = useState([])\n\n  const getUsersLocations = () => {\n    return axios({\n      method: 'get',\n      baseURL: 'https://quiet-plateau-57365.herokuapp.com/',\n      url: 'locations',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      }\n    })\n    .then((response) => {\n      console.log(response)\n      setUsersLocations(response.data.locations)\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n  }\n  const [isLoading, setLoading] = useState(false);\n  const [showLocations, setShowLocations] = useState(false);\n  useEffect(() => {\n    if (isLoading) {\n      getUsersLocations()\n      .then(() => {\n        setLoading(false);\n        setShowLocations(true);\n      });\n    } \n  }, [isLoading]);\n\n  const handleLoadClick = () => setLoading(true);\n  const handleClearClick = () => setShowLocations(false);\n\n  getLocation()\n  return (\n    <div className=\"landing\" >\n      <Container className=\"App d-flex h-100 mx-auto flex-column\">\n      <header className=\"masthead mb-auto\">\n        <div className=\"inner\">\n          <h3 className=\"masthead-brand text-light\">Light the World</h3>\n        </div>\n      </header>\n      <main role=\"main\" className=\"inner cover\">\n        <h1 className=\"cover-heading\">Unleash your Light</h1>\n        <p className=\"lead\">Click \"Allow Location Access\" at the prompt from your browser so that your light can be seen by all our community.</p>\n        \n        <Button\n          variant=\"light\"\n          disabled={isLoading}\n          onClick={!isLoading ? handleLoadClick : null}\n        >\n      {isLoading ? 'Loadingâ€¦' : 'Show Locations'}\n      </Button>\n      <Button variant=\"light\" onClick={handleClearClick} >Clear Locations</Button>\n      <ul>\n      {usersLocations.length > 0 && showLocations &&\n  usersLocations.map(loc => <li key={loc._id}>Latitude: {loc.latitude}  Longitude: {loc.longitude}</li>)}\n  </ul>\n      </main>\n    </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}